name: Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.9"
  AWS_REGION: eu-west-1
  
jobs:
  lint-and-format:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort
        pip install -r requirements.txt
    
    - name: Run Black (code formatting check)
      run: black --check --diff src/ tests/
    
    - name: Run isort (import sorting check)  
      run: isort --check-only --diff src/ tests/
    
    - name: Run flake8 (linting)
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    services:
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: s3,textract,comprehend,ses
          DEBUG: 1
          SKIP_INFRA_DOWNLOADS: 1
        ports:
          - 4566:4566
        options: >-
          --health-cmd="curl -f http://localhost:4566/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-flask
    
    - name: Wait for LocalStack to be ready
      run: |
        echo "Waiting for LocalStack to be ready..."
        timeout 60 bash -c 'until curl -f http://localhost:4566/health; do sleep 2; done'
        echo "LocalStack is ready!"
    
    - name: Create test directories
      run: |
        mkdir -p uploads
        mkdir -p logs
        mkdir -p tests/fixtures
    
    - name: Run unit tests
      env:
        AWS_ENDPOINT_URL: http://localhost:4566
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: eu-west-1
        FLASK_ENV: testing
        SECRET_KEY: test-secret-key
      run: |
        # Run tests with coverage
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=60
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-and-test-docker:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: document-categoriser:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker container
      run: |
        # Start container in background
        docker run -d --name test-container -p 5001:5001 \
          -e FLASK_ENV=testing \
          -e SECRET_KEY=test-secret-key \
          document-categoriser:test
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:5001/health || exit 1
        
        # Stop container
        docker stop test-container
        docker rm test-container

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-results.json || true
        bandit -r src/ -f txt
    
    - name: Run Safety check for vulnerabilities
      run: |
        safety check --json --output safety-results.json || true
        safety check
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-results.json
          safety-results.json

  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build-and-test-docker, security-scan]
    if: always()
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.lint-and-format.result }}" == "success" && \
              "${{ needs.test.result }}" == "success" && \
              "${{ needs.build-and-test-docker.result }}" == "success" && \
              "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=All CI checks passed! ✅" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=Some CI checks failed! ❌" >> $GITHUB_OUTPUT
        fi
    
    - name: Create job summary
      run: |
        echo "## CI Pipeline Results 🚀" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality & Formatting | ${{ needs.lint-and-format.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.build-and-test-docker.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
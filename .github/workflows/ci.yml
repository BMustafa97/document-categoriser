name: Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  
jobs:
  lint-and-format:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort
    
    - name: Run Black (code formatting check)
      run: black --check --diff src/ tests/
      continue-on-error: true
    
    - name: Run isort (import sorting check)  
      run: isort --check-only --diff src/ tests/
      continue-on-error: true
    
    - name: Run flake8 (linting)
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-flask
    
    - name: Create test directories
      run: |
        mkdir -p uploads
        mkdir -p logs
        mkdir -p tests/fixtures
    
    - name: Run unit tests
      env:
        FLASK_ENV: testing
        SECRET_KEY: test-secret-key
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=60
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    # Only build Docker on non-main branches (feature branches, develop, PRs)
    if: github.ref != 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: document-categoriser:test
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker container
      run: |
        # Start container in background
        docker run -d --name test-container -p 5001:5001 \
          -e FLASK_ENV=testing \
          -e SECRET_KEY=test-secret-key \
          document-categoriser:test
        
        # Wait for container to start
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:5001/health || exit 1
        
        # Stop container
        docker stop test-container
        docker rm test-container
name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types: 
      - completed
    branches: [main]

env:
  AWS_REGION: eu-west-1
  DOMAIN_NAME: ${{ vars.DOMAIN_NAME || 'yourdomain.com' }}
  ECS_CLUSTER: document-categoriser-cluster
  ECS_SERVICE: document-categoriser-service
  CONTAINER_NAME: document-categoriser
  ECR_REPOSITORY: document-categoriser

jobs:
  check-ci-status:
    name: Check CI Status
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
    - name: Check CI workflow status
      id: check
      run: |
        if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "✅ CI workflow succeeded, proceeding with deployment"
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          echo "❌ CI workflow failed, skipping deployment"
        fi

  build-and-push:
    name: Build & Push to ECR
    runs-on: ubuntu-latest
    needs: check-ci-status
    if: needs.check-ci-status.outputs.should-deploy == 'true'
    outputs:
      image-tag: ${{ steps.build-image.outputs.image-tag }}
      image-uri: ${{ steps.build-image.outputs.image-uri }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.head_sha }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build-image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: Set outputs
      run: |
        IMAGE_TAG="${GITHUB_SHA:0:7}"
        IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:main-${IMAGE_TAG}"
        echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
      id: build-image-outputs

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [check-ci-status, build-and-push]
    if: needs.check-ci-status.outputs.should-deploy == 'true'
    environment: 
      name: staging
      url: https://staging.${{ env.DOMAIN_NAME }}
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_CLUSTER }}-staging \
          --query taskDefinition > task-definition.json
    
    - name: Update task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ needs.build-and-push.outputs.image-uri }}
        environment-variables: |
          FLASK_ENV=staging
          AWS_REGION=${{ env.AWS_REGION }}
    
    - name: Deploy to ECS staging
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}-staging
        wait-for-service-stability: true
        wait-for-minutes: 10
    
    - name: Run staging smoke tests
      run: |
        echo "Running smoke tests against staging..."
        sleep 30  # Wait for service to be available
        
        # Test health endpoint
        for i in {1..5}; do
          if curl -f https://staging.${{ env.DOMAIN_NAME }}/health; then
            echo "✅ Staging health check passed"
            break
          else
            echo "❌ Staging health check failed, attempt $i/5"
            sleep 10
          fi
        done
        
        # Test upload endpoint availability
        if curl -f -X GET https://staging.${{ env.DOMAIN_NAME }}/; then
          echo "✅ Staging upload page accessible"
        else
          echo "❌ Staging upload page not accessible"
          exit 1
        fi
    
    - name: Create deployment status
      run: |
        echo "## 🚀 Staging Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** \`${{ needs.build-and-push.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "                - **URL:** https://${{ env.DOMAIN_NAME }}" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [check-ci-status, build-and-push, deploy-staging]
    if: needs.check-ci-status.outputs.should-deploy == 'true'
    environment: 
      name: production
      url: https://${{ env.DOMAIN_NAME }}
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Store current task definition (for rollback)
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_CLUSTER }} \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text > current-task-def-arn.txt
        echo "Current task definition: $(cat current-task-def-arn.txt)"
    
    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_CLUSTER }} \
          --query taskDefinition > task-definition.json
    
    - name: Update task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ needs.build-and-push.outputs.image-uri }}
        environment-variables: |
          FLASK_ENV=production
          AWS_REGION=${{ env.AWS_REGION }}
    
    - name: Deploy to ECS production
      id: deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        wait-for-minutes: 15
    
    - name: Run production smoke tests
      id: smoke-tests
      run: |
        echo "Running production smoke tests..."
        sleep 60  # Wait longer for production service
        
        HEALTH_CHECK_PASSED=false
        
        # Test health endpoint
        for i in {1..10}; do
          if curl -f https://${{ env.DOMAIN_NAME }}/health; then
            echo "✅ Production health check passed"
            HEALTH_CHECK_PASSED=true
            break
          else
            echo "❌ Production health check failed, attempt $i/10"
            sleep 15
          fi
        done
        
        if [[ "$HEALTH_CHECK_PASSED" == "false" ]]; then
          echo "❌ Production health checks failed after 10 attempts"
          echo "health-check-failed=true" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Test main application
        if curl -f -X GET https://${{ env.DOMAIN_NAME }}/; then
          echo "✅ Production application accessible"
        else
          echo "❌ Production application not accessible"
          echo "app-check-failed=true" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Rollback on failure
      if: failure() && (steps.smoke-tests.outputs.health-check-failed == 'true' || steps.smoke-tests.outputs.app-check-failed == 'true')
      run: |
        echo "🚨 Smoke tests failed, initiating rollback..."
        PREVIOUS_TASK_DEF=$(cat current-task-def-arn.txt)
        
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition "$PREVIOUS_TASK_DEF"
        
        echo "⏪ Rollback initiated to task definition: $PREVIOUS_TASK_DEF"
        
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}
        
        echo "✅ Rollback completed"
        
        # Send failure notification
        echo "## 🚨 Production Deployment Failed & Rolled Back" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Reason:** Smoke tests failed" >> $GITHUB_STEP_SUMMARY
        echo "- **Action:** Automatic rollback completed" >> $GITHUB_STEP_SUMMARY
        echo "- **Rolled back to:** \`$PREVIOUS_TASK_DEF\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Create success summary
      if: success()
      run: |
        echo "## 🎉 Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** \`${{ needs.build-and-push.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** https://yourdomain.com" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check:** ✅ Passed" >> $GITHUB_STEP_SUMMARY

  notify-deployment:
    name: Send Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Determine notification message
      id: message
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=🎉 Production deployment successful!" >> $GITHUB_OUTPUT
          echo "color=good" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "status=partial" >> $GITHUB_OUTPUT
          echo "message=⚠️ Staging deployed, production failed or skipped" >> $GITHUB_OUTPUT
          echo "color=warning" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Deployment failed" >> $GITHUB_OUTPUT
          echo "color=danger" >> $GITHUB_OUTPUT
        fi
    
    - name: Create final summary
      run: |
        echo "## 📋 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | Status | Result |" >> $GITHUB_STEP_SUMMARY
        echo "|-------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Staging | ${{ needs.deploy-staging.result == 'success' && '✅ Success' || '❌ Failed' }} | ${{ needs.deploy-staging.result == 'success' && 'Deployed successfully' || 'Deployment failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Production | ${{ needs.deploy-production.result == 'success' && '✅ Success' || (needs.deploy-production.result == 'failure' && '❌ Failed') || '⏸️ Skipped' }} | ${{ needs.deploy-production.result == 'success' && 'Deployed successfully' || (needs.deploy-production.result == 'failure' && 'Deployment failed or rolled back') || 'Manual approval required' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status:** ${{ steps.message.outputs.message }}" >> $GITHUB_STEP_SUMMARY